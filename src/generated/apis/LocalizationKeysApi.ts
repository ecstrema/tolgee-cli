/* tslint:disable */
/* eslint-disable */
/**
 * Tolgee API 
 * Tolgee Server API reference
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ComplexEditKeyDto,
  CreateKeyDto,
  DeleteKeysDto,
  EditKeyDto,
  KeyModel,
  KeyWithDataModel,
} from '../models';
import {
    ComplexEditKeyDtoFromJSON,
    ComplexEditKeyDtoToJSON,
    CreateKeyDtoFromJSON,
    CreateKeyDtoToJSON,
    DeleteKeysDtoFromJSON,
    DeleteKeysDtoToJSON,
    EditKeyDtoFromJSON,
    EditKeyDtoToJSON,
    KeyModelFromJSON,
    KeyModelToJSON,
    KeyWithDataModelFromJSON,
    KeyWithDataModelToJSON,
} from '../models';

export interface ComplexEdit1Request {
    id: number;
    complexEditKeyDto: ComplexEditKeyDto;
    ak?: string;
    xAPIKey?: string;
}

export interface Create2Request {
    createKeyDto: CreateKeyDto;
    ak?: string;
    xAPIKey?: string;
}

export interface Create3Request {
    createKeyDto: CreateKeyDto;
    ak?: string;
    xAPIKey?: string;
}

export interface Delete1Request {
    ids: Set<number>;
    ak?: string;
    xAPIKey?: string;
}

export interface Delete3Request {
    deleteKeysDto: DeleteKeysDto;
    ak?: string;
    xAPIKey?: string;
}

export interface Edit1Request {
    id: number;
    editKeyDto: EditKeyDto;
    ak?: string;
    xAPIKey?: string;
}

/**
 * 
 */
export class LocalizationKeysApi extends runtime.BaseAPI {

    /**
     * More
     */
    async complexEdit1Raw(requestParameters: ComplexEdit1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KeyWithDataModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling complexEdit1.');
        }

        if (requestParameters.complexEditKeyDto === null || requestParameters.complexEditKeyDto === undefined) {
            throw new runtime.RequiredError('complexEditKeyDto','Required parameter requestParameters.complexEditKeyDto was null or undefined when calling complexEdit1.');
        }

        const queryParameters: any = {};

        if (requestParameters.ak !== undefined) {
            queryParameters['ak'] = requestParameters.ak;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/v2/projects/keys/{id}/complex-update`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComplexEditKeyDtoToJSON(requestParameters.complexEditKeyDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KeyWithDataModelFromJSON(jsonValue));
    }

    /**
     * More
     */
    async complexEdit1(requestParameters: ComplexEdit1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KeyWithDataModel> {
        const response = await this.complexEdit1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates new key
     */
    async create2Raw(requestParameters: Create2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KeyWithDataModel>> {
        if (requestParameters.createKeyDto === null || requestParameters.createKeyDto === undefined) {
            throw new runtime.RequiredError('createKeyDto','Required parameter requestParameters.createKeyDto was null or undefined when calling create2.');
        }

        const queryParameters: any = {};

        if (requestParameters.ak !== undefined) {
            queryParameters['ak'] = requestParameters.ak;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/v2/projects/keys/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateKeyDtoToJSON(requestParameters.createKeyDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KeyWithDataModelFromJSON(jsonValue));
    }

    /**
     * Creates new key
     */
    async create2(requestParameters: Create2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KeyWithDataModel> {
        const response = await this.create2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates new key
     */
    async create3Raw(requestParameters: Create3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KeyWithDataModel>> {
        if (requestParameters.createKeyDto === null || requestParameters.createKeyDto === undefined) {
            throw new runtime.RequiredError('createKeyDto','Required parameter requestParameters.createKeyDto was null or undefined when calling create3.');
        }

        const queryParameters: any = {};

        if (requestParameters.ak !== undefined) {
            queryParameters['ak'] = requestParameters.ak;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/v2/projects/keys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateKeyDtoToJSON(requestParameters.createKeyDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KeyWithDataModelFromJSON(jsonValue));
    }

    /**
     * Creates new key
     */
    async create3(requestParameters: Create3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KeyWithDataModel> {
        const response = await this.create3Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes one or multiple keys by their IDs
     */
    async delete1Raw(requestParameters: Delete1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError('ids','Required parameter requestParameters.ids was null or undefined when calling delete1.');
        }

        const queryParameters: any = {};

        if (requestParameters.ak !== undefined) {
            queryParameters['ak'] = requestParameters.ak;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/v2/projects/keys/{ids}`.replace(`{${"ids"}}`, encodeURIComponent(String(requestParameters.ids))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes one or multiple keys by their IDs
     */
    async delete1(requestParameters: Delete1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.delete1Raw(requestParameters, initOverrides);
    }

    /**
     * Deletes one or multiple keys by their IDs in request body
     */
    async delete3Raw(requestParameters: Delete3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.deleteKeysDto === null || requestParameters.deleteKeysDto === undefined) {
            throw new runtime.RequiredError('deleteKeysDto','Required parameter requestParameters.deleteKeysDto was null or undefined when calling delete3.');
        }

        const queryParameters: any = {};

        if (requestParameters.ak !== undefined) {
            queryParameters['ak'] = requestParameters.ak;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/v2/projects/keys`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteKeysDtoToJSON(requestParameters.deleteKeysDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes one or multiple keys by their IDs in request body
     */
    async delete3(requestParameters: Delete3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.delete3Raw(requestParameters, initOverrides);
    }

    /**
     * Edits key name
     */
    async edit1Raw(requestParameters: Edit1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KeyModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling edit1.');
        }

        if (requestParameters.editKeyDto === null || requestParameters.editKeyDto === undefined) {
            throw new runtime.RequiredError('editKeyDto','Required parameter requestParameters.editKeyDto was null or undefined when calling edit1.');
        }

        const queryParameters: any = {};

        if (requestParameters.ak !== undefined) {
            queryParameters['ak'] = requestParameters.ak;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/v2/projects/keys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EditKeyDtoToJSON(requestParameters.editKeyDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KeyModelFromJSON(jsonValue));
    }

    /**
     * Edits key name
     */
    async edit1(requestParameters: Edit1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KeyModel> {
        const response = await this.edit1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
