/* tslint:disable */
/* eslint-disable */
/**
 * Tolgee API 
 * Tolgee Server API reference
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PagedModelTagModel,
  TagKeyDto,
  TagModel,
} from '../models';
import {
    PagedModelTagModelFromJSON,
    PagedModelTagModelToJSON,
    TagKeyDtoFromJSON,
    TagKeyDtoToJSON,
    TagModelFromJSON,
    TagModelToJSON,
} from '../models';

export interface GetAll2Request {
    search?: string;
    page?: number;
    size?: number;
    sort?: Array<string>;
    ak?: string;
    xAPIKey?: string;
}

export interface RemoveTag1Request {
    keyId: number;
    tagId: number;
    ak?: string;
    xAPIKey?: string;
}

export interface TagKey1Request {
    keyId: number;
    tagKeyDto: TagKeyDto;
    ak?: string;
    xAPIKey?: string;
}

/**
 * 
 */
export class TagsApi extends runtime.BaseAPI {

    /**
     * Returns project tags
     */
    async getAll2Raw(requestParameters: GetAll2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedModelTagModel>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.ak !== undefined) {
            queryParameters['ak'] = requestParameters.ak;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/v2/projects/tags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedModelTagModelFromJSON(jsonValue));
    }

    /**
     * Returns project tags
     */
    async getAll2(requestParameters: GetAll2Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedModelTagModel> {
        const response = await this.getAll2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes tag with provided id from key with provided id
     */
    async removeTag1Raw(requestParameters: RemoveTag1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.keyId === null || requestParameters.keyId === undefined) {
            throw new runtime.RequiredError('keyId','Required parameter requestParameters.keyId was null or undefined when calling removeTag1.');
        }

        if (requestParameters.tagId === null || requestParameters.tagId === undefined) {
            throw new runtime.RequiredError('tagId','Required parameter requestParameters.tagId was null or undefined when calling removeTag1.');
        }

        const queryParameters: any = {};

        if (requestParameters.ak !== undefined) {
            queryParameters['ak'] = requestParameters.ak;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/v2/projects/keys/{keyId}/tags/{tagId}`.replace(`{${"keyId"}}`, encodeURIComponent(String(requestParameters.keyId))).replace(`{${"tagId"}}`, encodeURIComponent(String(requestParameters.tagId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes tag with provided id from key with provided id
     */
    async removeTag1(requestParameters: RemoveTag1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeTag1Raw(requestParameters, initOverrides);
    }

    /**
     * Tags a key with tag. If tag with provided name doesn\'t exist, it is created
     */
    async tagKey1Raw(requestParameters: TagKey1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagModel>> {
        if (requestParameters.keyId === null || requestParameters.keyId === undefined) {
            throw new runtime.RequiredError('keyId','Required parameter requestParameters.keyId was null or undefined when calling tagKey1.');
        }

        if (requestParameters.tagKeyDto === null || requestParameters.tagKeyDto === undefined) {
            throw new runtime.RequiredError('tagKeyDto','Required parameter requestParameters.tagKeyDto was null or undefined when calling tagKey1.');
        }

        const queryParameters: any = {};

        if (requestParameters.ak !== undefined) {
            queryParameters['ak'] = requestParameters.ak;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/v2/projects/keys/{keyId}/tags`.replace(`{${"keyId"}}`, encodeURIComponent(String(requestParameters.keyId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TagKeyDtoToJSON(requestParameters.tagKeyDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagModelFromJSON(jsonValue));
    }

    /**
     * Tags a key with tag. If tag with provided name doesn\'t exist, it is created
     */
    async tagKey1(requestParameters: TagKey1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagModel> {
        const response = await this.tagKey1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
