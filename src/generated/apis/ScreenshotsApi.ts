/* tslint:disable */
/* eslint-disable */
/**
 * Tolgee API 
 * Tolgee Server API reference
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CollectionModelScreenshotModel,
  ScreenshotModel,
} from '../models';
import {
    CollectionModelScreenshotModelFromJSON,
    CollectionModelScreenshotModelToJSON,
    ScreenshotModelFromJSON,
    ScreenshotModelToJSON,
} from '../models';

export interface DeleteScreenshotsRequest {
    ids: Set<number>;
    ak?: string;
    xAPIKey?: string;
}

export interface GetKeyScreenshotsRequest {
    keyId: number;
    ak?: string;
    xAPIKey?: string;
}

export interface UploadScreenshotRequest {
    keyId: number;
    screenshot: Blob;
    ak?: string;
    xAPIKey?: string;
}

/**
 * 
 */
export class ScreenshotsApi extends runtime.BaseAPI {

    /**
     * Deletes multiple screenshots by ids
     */
    async deleteScreenshotsRaw(requestParameters: DeleteScreenshotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError('ids','Required parameter requestParameters.ids was null or undefined when calling deleteScreenshots.');
        }

        const queryParameters: any = {};

        if (requestParameters.ak !== undefined) {
            queryParameters['ak'] = requestParameters.ak;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/v2/projects/keys/{keyId}/screenshots/{ids}`.replace(`{${"ids"}}`, encodeURIComponent(String(requestParameters.ids))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes multiple screenshots by ids
     */
    async deleteScreenshots(requestParameters: DeleteScreenshotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteScreenshotsRaw(requestParameters, initOverrides);
    }

    /**
     * Returns all screenshots for specified key
     */
    async getKeyScreenshotsRaw(requestParameters: GetKeyScreenshotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelScreenshotModel>> {
        if (requestParameters.keyId === null || requestParameters.keyId === undefined) {
            throw new runtime.RequiredError('keyId','Required parameter requestParameters.keyId was null or undefined when calling getKeyScreenshots.');
        }

        const queryParameters: any = {};

        if (requestParameters.ak !== undefined) {
            queryParameters['ak'] = requestParameters.ak;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/v2/projects/keys/{keyId}/screenshots`.replace(`{${"keyId"}}`, encodeURIComponent(String(requestParameters.keyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionModelScreenshotModelFromJSON(jsonValue));
    }

    /**
     * Returns all screenshots for specified key
     */
    async getKeyScreenshots(requestParameters: GetKeyScreenshotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelScreenshotModel> {
        const response = await this.getKeyScreenshotsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload screenshot for specific key
     */
    async uploadScreenshotRaw(requestParameters: UploadScreenshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScreenshotModel>> {
        if (requestParameters.keyId === null || requestParameters.keyId === undefined) {
            throw new runtime.RequiredError('keyId','Required parameter requestParameters.keyId was null or undefined when calling uploadScreenshot.');
        }

        if (requestParameters.screenshot === null || requestParameters.screenshot === undefined) {
            throw new runtime.RequiredError('screenshot','Required parameter requestParameters.screenshot was null or undefined when calling uploadScreenshot.');
        }

        const queryParameters: any = {};

        if (requestParameters.ak !== undefined) {
            queryParameters['ak'] = requestParameters.ak;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.screenshot !== undefined) {
            formParams.append('screenshot', requestParameters.screenshot as any);
        }

        const response = await this.request({
            path: `/v2/projects/keys/{keyId}/screenshots`.replace(`{${"keyId"}}`, encodeURIComponent(String(requestParameters.keyId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScreenshotModelFromJSON(jsonValue));
    }

    /**
     * Upload screenshot for specific key
     */
    async uploadScreenshot(requestParameters: UploadScreenshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScreenshotModel> {
        const response = await this.uploadScreenshotRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
