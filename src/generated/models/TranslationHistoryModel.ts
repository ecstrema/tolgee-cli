/* tslint:disable */
/* eslint-disable */
/**
 * Tolgee API 
 * Tolgee Server API reference
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PropertyModification } from './PropertyModification';
import {
    PropertyModificationFromJSON,
    PropertyModificationFromJSONTyped,
    PropertyModificationToJSON,
} from './PropertyModification';
import type { SimpleUserAccountModel } from './SimpleUserAccountModel';
import {
    SimpleUserAccountModelFromJSON,
    SimpleUserAccountModelFromJSONTyped,
    SimpleUserAccountModelToJSON,
} from './SimpleUserAccountModel';

/**
 * 
 * @export
 * @interface TranslationHistoryModel
 */
export interface TranslationHistoryModel {
    /**
     * Modified fields
     * @type {{ [key: string]: PropertyModification; }}
     * @memberof TranslationHistoryModel
     */
    modifications?: { [key: string]: PropertyModification; };
    /**
     * Unix timestamp of the revision
     * @type {number}
     * @memberof TranslationHistoryModel
     */
    timestamp: number;
    /**
     * 
     * @type {SimpleUserAccountModel}
     * @memberof TranslationHistoryModel
     */
    author?: SimpleUserAccountModel;
    /**
     * 
     * @type {string}
     * @memberof TranslationHistoryModel
     */
    revisionType: TranslationHistoryModelRevisionTypeEnum;
}


/**
 * @export
 */
export const TranslationHistoryModelRevisionTypeEnum = {
    Add: 'ADD',
    Mod: 'MOD',
    Del: 'DEL'
} as const;
export type TranslationHistoryModelRevisionTypeEnum = typeof TranslationHistoryModelRevisionTypeEnum[keyof typeof TranslationHistoryModelRevisionTypeEnum];


/**
 * Check if a given object implements the TranslationHistoryModel interface.
 */
export function instanceOfTranslationHistoryModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "timestamp" in value;
    isInstance = isInstance && "revisionType" in value;

    return isInstance;
}

export function TranslationHistoryModelFromJSON(json: any): TranslationHistoryModel {
    return TranslationHistoryModelFromJSONTyped(json, false);
}

export function TranslationHistoryModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): TranslationHistoryModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'modifications': !exists(json, 'modifications') ? undefined : (mapValues(json['modifications'], PropertyModificationFromJSON)),
        'timestamp': json['timestamp'],
        'author': !exists(json, 'author') ? undefined : SimpleUserAccountModelFromJSON(json['author']),
        'revisionType': json['revisionType'],
    };
}

export function TranslationHistoryModelToJSON(value?: TranslationHistoryModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'modifications': value.modifications === undefined ? undefined : (mapValues(value.modifications, PropertyModificationToJSON)),
        'timestamp': value.timestamp,
        'author': SimpleUserAccountModelToJSON(value.author),
        'revisionType': value.revisionType,
    };
}

