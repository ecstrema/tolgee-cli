/* tslint:disable */
/* eslint-disable */
/**
 * Tolgee API 
 * Tolgee Server API reference
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Translations object
 * @export
 * @interface TranslationViewModel
 */
export interface TranslationViewModel {
    /**
     * Id of translation record
     * @type {number}
     * @memberof TranslationViewModel
     */
    id: number;
    /**
     * Translation text
     * @type {string}
     * @memberof TranslationViewModel
     */
    text?: string;
    /**
     * State of translation
     * @type {string}
     * @memberof TranslationViewModel
     */
    state: TranslationViewModelStateEnum;
    /**
     * Was translated using Translation Memory or Machine translation service?
     * @type {boolean}
     * @memberof TranslationViewModel
     */
    auto: boolean;
    /**
     * Which machine translation service was used to auto translate this
     * @type {string}
     * @memberof TranslationViewModel
     */
    mtProvider?: TranslationViewModelMtProviderEnum;
    /**
     * Count of translation comments
     * @type {number}
     * @memberof TranslationViewModel
     */
    commentCount: number;
    /**
     * Count of unresolved translation comments
     * @type {number}
     * @memberof TranslationViewModel
     */
    unresolvedCommentCount: number;
    /**
     * Was translation memory used to translate this?
     * @type {boolean}
     * @memberof TranslationViewModel
     */
    fromTranslationMemory: boolean;
}


/**
 * @export
 */
export const TranslationViewModelStateEnum = {
    Untranslated: 'UNTRANSLATED',
    Translated: 'TRANSLATED',
    Reviewed: 'REVIEWED'
} as const;
export type TranslationViewModelStateEnum = typeof TranslationViewModelStateEnum[keyof typeof TranslationViewModelStateEnum];

/**
 * @export
 */
export const TranslationViewModelMtProviderEnum = {
    Google: 'GOOGLE',
    Aws: 'AWS',
    Deepl: 'DEEPL'
} as const;
export type TranslationViewModelMtProviderEnum = typeof TranslationViewModelMtProviderEnum[keyof typeof TranslationViewModelMtProviderEnum];


/**
 * Check if a given object implements the TranslationViewModel interface.
 */
export function instanceOfTranslationViewModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "auto" in value;
    isInstance = isInstance && "commentCount" in value;
    isInstance = isInstance && "unresolvedCommentCount" in value;
    isInstance = isInstance && "fromTranslationMemory" in value;

    return isInstance;
}

export function TranslationViewModelFromJSON(json: any): TranslationViewModel {
    return TranslationViewModelFromJSONTyped(json, false);
}

export function TranslationViewModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): TranslationViewModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'text': !exists(json, 'text') ? undefined : json['text'],
        'state': json['state'],
        'auto': json['auto'],
        'mtProvider': !exists(json, 'mtProvider') ? undefined : json['mtProvider'],
        'commentCount': json['commentCount'],
        'unresolvedCommentCount': json['unresolvedCommentCount'],
        'fromTranslationMemory': json['fromTranslationMemory'],
    };
}

export function TranslationViewModelToJSON(value?: TranslationViewModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'text': value.text,
        'state': value.state,
        'auto': value.auto,
        'mtProvider': value.mtProvider,
        'commentCount': value.commentCount,
        'unresolvedCommentCount': value.unresolvedCommentCount,
        'fromTranslationMemory': value.fromTranslationMemory,
    };
}

