/* tslint:disable */
/* eslint-disable */
/**
 * Tolgee API 
 * Tolgee Server API reference
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ImportFileIssueParamView
 */
export interface ImportFileIssueParamView {
    /**
     * 
     * @type {string}
     * @memberof ImportFileIssueParamView
     */
    value?: string;
    /**
     * 
     * @type {string}
     * @memberof ImportFileIssueParamView
     */
    type: ImportFileIssueParamViewTypeEnum;
}


/**
 * @export
 */
export const ImportFileIssueParamViewTypeEnum = {
    KeyName: 'KEY_NAME',
    KeyId: 'KEY_ID',
    LanguageId: 'LANGUAGE_ID',
    KeyIndex: 'KEY_INDEX',
    Value: 'VALUE',
    Line: 'LINE',
    FileNodeOriginal: 'FILE_NODE_ORIGINAL'
} as const;
export type ImportFileIssueParamViewTypeEnum = typeof ImportFileIssueParamViewTypeEnum[keyof typeof ImportFileIssueParamViewTypeEnum];


/**
 * Check if a given object implements the ImportFileIssueParamView interface.
 */
export function instanceOfImportFileIssueParamView(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function ImportFileIssueParamViewFromJSON(json: any): ImportFileIssueParamView {
    return ImportFileIssueParamViewFromJSONTyped(json, false);
}

export function ImportFileIssueParamViewFromJSONTyped(json: any, ignoreDiscriminator: boolean): ImportFileIssueParamView {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'value': !exists(json, 'value') ? undefined : json['value'],
        'type': json['type'],
    };
}

export function ImportFileIssueParamViewToJSON(value?: ImportFileIssueParamView | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'value': value.value,
        'type': value.type,
    };
}

