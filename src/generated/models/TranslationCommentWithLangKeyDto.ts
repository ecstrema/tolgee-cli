/* tslint:disable */
/* eslint-disable */
/**
 * Tolgee API 
 * Tolgee Server API reference
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TranslationCommentWithLangKeyDto
 */
export interface TranslationCommentWithLangKeyDto {
    /**
     * 
     * @type {number}
     * @memberof TranslationCommentWithLangKeyDto
     */
    keyId: number;
    /**
     * 
     * @type {number}
     * @memberof TranslationCommentWithLangKeyDto
     */
    languageId: number;
    /**
     * 
     * @type {string}
     * @memberof TranslationCommentWithLangKeyDto
     */
    text: string;
    /**
     * 
     * @type {string}
     * @memberof TranslationCommentWithLangKeyDto
     */
    state: TranslationCommentWithLangKeyDtoStateEnum;
}


/**
 * @export
 */
export const TranslationCommentWithLangKeyDtoStateEnum = {
    ResolutionNotNeeded: 'RESOLUTION_NOT_NEEDED',
    NeedsResolution: 'NEEDS_RESOLUTION',
    Resolved: 'RESOLVED'
} as const;
export type TranslationCommentWithLangKeyDtoStateEnum = typeof TranslationCommentWithLangKeyDtoStateEnum[keyof typeof TranslationCommentWithLangKeyDtoStateEnum];


/**
 * Check if a given object implements the TranslationCommentWithLangKeyDto interface.
 */
export function instanceOfTranslationCommentWithLangKeyDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "keyId" in value;
    isInstance = isInstance && "languageId" in value;
    isInstance = isInstance && "text" in value;
    isInstance = isInstance && "state" in value;

    return isInstance;
}

export function TranslationCommentWithLangKeyDtoFromJSON(json: any): TranslationCommentWithLangKeyDto {
    return TranslationCommentWithLangKeyDtoFromJSONTyped(json, false);
}

export function TranslationCommentWithLangKeyDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): TranslationCommentWithLangKeyDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'keyId': json['keyId'],
        'languageId': json['languageId'],
        'text': json['text'],
        'state': json['state'],
    };
}

export function TranslationCommentWithLangKeyDtoToJSON(value?: TranslationCommentWithLangKeyDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'keyId': value.keyId,
        'languageId': value.languageId,
        'text': value.text,
        'state': value.state,
    };
}

