/* tslint:disable */
/* eslint-disable */
/**
 * Tolgee API 
 * Tolgee Server API reference
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ExistenceEntityDescription } from './ExistenceEntityDescription';
import {
    ExistenceEntityDescriptionFromJSON,
    ExistenceEntityDescriptionFromJSONTyped,
    ExistenceEntityDescriptionToJSON,
} from './ExistenceEntityDescription';
import type { PropertyModification } from './PropertyModification';
import {
    PropertyModificationFromJSON,
    PropertyModificationFromJSONTyped,
    PropertyModificationToJSON,
} from './PropertyModification';

/**
 * 
 * @export
 * @interface ModifiedEntityModel
 */
export interface ModifiedEntityModel {
    /**
     * 
     * @type {number}
     * @memberof ModifiedEntityModel
     */
    entityId: number;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ModifiedEntityModel
     */
    description?: { [key: string]: object; };
    /**
     * 
     * @type {{ [key: string]: PropertyModification; }}
     * @memberof ModifiedEntityModel
     */
    modifications?: { [key: string]: PropertyModification; };
    /**
     * 
     * @type {{ [key: string]: ExistenceEntityDescription; }}
     * @memberof ModifiedEntityModel
     */
    relations?: { [key: string]: ExistenceEntityDescription; };
    /**
     * 
     * @type {boolean}
     * @memberof ModifiedEntityModel
     */
    _exists?: boolean;
}

/**
 * Check if a given object implements the ModifiedEntityModel interface.
 */
export function instanceOfModifiedEntityModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "entityId" in value;

    return isInstance;
}

export function ModifiedEntityModelFromJSON(json: any): ModifiedEntityModel {
    return ModifiedEntityModelFromJSONTyped(json, false);
}

export function ModifiedEntityModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModifiedEntityModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'entityId': json['entityId'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'modifications': !exists(json, 'modifications') ? undefined : (mapValues(json['modifications'], PropertyModificationFromJSON)),
        'relations': !exists(json, 'relations') ? undefined : (mapValues(json['relations'], ExistenceEntityDescriptionFromJSON)),
        '_exists': !exists(json, 'exists') ? undefined : json['exists'],
    };
}

export function ModifiedEntityModelToJSON(value?: ModifiedEntityModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'entityId': value.entityId,
        'description': value.description,
        'modifications': value.modifications === undefined ? undefined : (mapValues(value.modifications, PropertyModificationToJSON)),
        'relations': value.relations === undefined ? undefined : (mapValues(value.relations, ExistenceEntityDescriptionToJSON)),
        'exists': value._exists,
    };
}

