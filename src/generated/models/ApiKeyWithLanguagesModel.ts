/* tslint:disable */
/* eslint-disable */
/**
 * Tolgee API 
 * Tolgee Server API reference
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ApiKeyWithLanguagesModel
 */
export interface ApiKeyWithLanguagesModel {
    /**
     * 
     * @type {number}
     * @memberof ApiKeyWithLanguagesModel
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof ApiKeyWithLanguagesModel
     */
    key: string;
    /**
     * 
     * @type {string}
     * @memberof ApiKeyWithLanguagesModel
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiKeyWithLanguagesModel
     */
    userFullName?: string;
    /**
     * 
     * @type {number}
     * @memberof ApiKeyWithLanguagesModel
     */
    projectId: number;
    /**
     * 
     * @type {string}
     * @memberof ApiKeyWithLanguagesModel
     */
    projectName: string;
    /**
     * 
     * @type {Set<string>}
     * @memberof ApiKeyWithLanguagesModel
     */
    scopes: Set<string>;
    /**
     * Languages for which user has translate permission.
     * 
     * If null, all languages are permitted.
     *   
     * @type {Array<number>}
     * @memberof ApiKeyWithLanguagesModel
     */
    permittedLanguageIds?: Array<number>;
}

/**
 * Check if a given object implements the ApiKeyWithLanguagesModel interface.
 */
export function instanceOfApiKeyWithLanguagesModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "key" in value;
    isInstance = isInstance && "projectId" in value;
    isInstance = isInstance && "projectName" in value;
    isInstance = isInstance && "scopes" in value;

    return isInstance;
}

export function ApiKeyWithLanguagesModelFromJSON(json: any): ApiKeyWithLanguagesModel {
    return ApiKeyWithLanguagesModelFromJSONTyped(json, false);
}

export function ApiKeyWithLanguagesModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApiKeyWithLanguagesModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'key': json['key'],
        'username': !exists(json, 'username') ? undefined : json['username'],
        'userFullName': !exists(json, 'userFullName') ? undefined : json['userFullName'],
        'projectId': json['projectId'],
        'projectName': json['projectName'],
        'scopes': json['scopes'],
        'permittedLanguageIds': !exists(json, 'permittedLanguageIds') ? undefined : json['permittedLanguageIds'],
    };
}

export function ApiKeyWithLanguagesModelToJSON(value?: ApiKeyWithLanguagesModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'key': value.key,
        'username': value.username,
        'userFullName': value.userFullName,
        'projectId': value.projectId,
        'projectName': value.projectName,
        'scopes': value.scopes,
        'permittedLanguageIds': value.permittedLanguageIds,
    };
}

