/* tslint:disable */
/* eslint-disable */
/**
 * Tolgee API 
 * Tolgee Server API reference
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ImportFileIssueParamView } from './ImportFileIssueParamView';
import {
    ImportFileIssueParamViewFromJSON,
    ImportFileIssueParamViewFromJSONTyped,
    ImportFileIssueParamViewToJSON,
} from './ImportFileIssueParamView';

/**
 * 
 * @export
 * @interface EntityModelImportFileIssueView
 */
export interface EntityModelImportFileIssueView {
    /**
     * 
     * @type {number}
     * @memberof EntityModelImportFileIssueView
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof EntityModelImportFileIssueView
     */
    type: EntityModelImportFileIssueViewTypeEnum;
    /**
     * 
     * @type {Array<ImportFileIssueParamView>}
     * @memberof EntityModelImportFileIssueView
     */
    params: Array<ImportFileIssueParamView>;
}


/**
 * @export
 */
export const EntityModelImportFileIssueViewTypeEnum = {
    KeyIsNotString: 'KEY_IS_NOT_STRING',
    MultipleValuesForKeyAndLanguage: 'MULTIPLE_VALUES_FOR_KEY_AND_LANGUAGE',
    ValueIsNotString: 'VALUE_IS_NOT_STRING',
    KeyIsEmpty: 'KEY_IS_EMPTY',
    ValueIsEmpty: 'VALUE_IS_EMPTY',
    PoMsgctxtNotSupported: 'PO_MSGCTXT_NOT_SUPPORTED',
    IdAttributeNotProvided: 'ID_ATTRIBUTE_NOT_PROVIDED',
    TargetNotProvided: 'TARGET_NOT_PROVIDED',
    TranslationTooLong: 'TRANSLATION_TOO_LONG'
} as const;
export type EntityModelImportFileIssueViewTypeEnum = typeof EntityModelImportFileIssueViewTypeEnum[keyof typeof EntityModelImportFileIssueViewTypeEnum];


/**
 * Check if a given object implements the EntityModelImportFileIssueView interface.
 */
export function instanceOfEntityModelImportFileIssueView(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "params" in value;

    return isInstance;
}

export function EntityModelImportFileIssueViewFromJSON(json: any): EntityModelImportFileIssueView {
    return EntityModelImportFileIssueViewFromJSONTyped(json, false);
}

export function EntityModelImportFileIssueViewFromJSONTyped(json: any, ignoreDiscriminator: boolean): EntityModelImportFileIssueView {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'type': json['type'],
        'params': ((json['params'] as Array<any>).map(ImportFileIssueParamViewFromJSON)),
    };
}

export function EntityModelImportFileIssueViewToJSON(value?: EntityModelImportFileIssueView | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'type': value.type,
        'params': ((value.params as Array<any>).map(ImportFileIssueParamViewToJSON)),
    };
}

