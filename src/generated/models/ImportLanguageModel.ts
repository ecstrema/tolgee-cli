/* tslint:disable */
/* eslint-disable */
/**
 * Tolgee API 
 * Tolgee Server API reference
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ImportLanguageModel
 */
export interface ImportLanguageModel {
    /**
     * 
     * @type {number}
     * @memberof ImportLanguageModel
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof ImportLanguageModel
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof ImportLanguageModel
     */
    existingLanguageId?: number;
    /**
     * 
     * @type {string}
     * @memberof ImportLanguageModel
     */
    existingLanguageTag?: string;
    /**
     * 
     * @type {string}
     * @memberof ImportLanguageModel
     */
    existingLanguageAbbreviation?: string;
    /**
     * 
     * @type {string}
     * @memberof ImportLanguageModel
     */
    existingLanguageName?: string;
    /**
     * 
     * @type {string}
     * @memberof ImportLanguageModel
     */
    importFileName: string;
    /**
     * 
     * @type {number}
     * @memberof ImportLanguageModel
     */
    importFileId: number;
    /**
     * 
     * @type {number}
     * @memberof ImportLanguageModel
     */
    importFileIssueCount: number;
    /**
     * 
     * @type {number}
     * @memberof ImportLanguageModel
     */
    totalCount: number;
    /**
     * 
     * @type {number}
     * @memberof ImportLanguageModel
     */
    conflictCount: number;
    /**
     * 
     * @type {number}
     * @memberof ImportLanguageModel
     */
    resolvedCount: number;
}

/**
 * Check if a given object implements the ImportLanguageModel interface.
 */
export function instanceOfImportLanguageModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "importFileName" in value;
    isInstance = isInstance && "importFileId" in value;
    isInstance = isInstance && "importFileIssueCount" in value;
    isInstance = isInstance && "totalCount" in value;
    isInstance = isInstance && "conflictCount" in value;
    isInstance = isInstance && "resolvedCount" in value;

    return isInstance;
}

export function ImportLanguageModelFromJSON(json: any): ImportLanguageModel {
    return ImportLanguageModelFromJSONTyped(json, false);
}

export function ImportLanguageModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): ImportLanguageModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'existingLanguageId': !exists(json, 'existingLanguageId') ? undefined : json['existingLanguageId'],
        'existingLanguageTag': !exists(json, 'existingLanguageTag') ? undefined : json['existingLanguageTag'],
        'existingLanguageAbbreviation': !exists(json, 'existingLanguageAbbreviation') ? undefined : json['existingLanguageAbbreviation'],
        'existingLanguageName': !exists(json, 'existingLanguageName') ? undefined : json['existingLanguageName'],
        'importFileName': json['importFileName'],
        'importFileId': json['importFileId'],
        'importFileIssueCount': json['importFileIssueCount'],
        'totalCount': json['totalCount'],
        'conflictCount': json['conflictCount'],
        'resolvedCount': json['resolvedCount'],
    };
}

export function ImportLanguageModelToJSON(value?: ImportLanguageModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'existingLanguageId': value.existingLanguageId,
        'existingLanguageTag': value.existingLanguageTag,
        'existingLanguageAbbreviation': value.existingLanguageAbbreviation,
        'existingLanguageName': value.existingLanguageName,
        'importFileName': value.importFileName,
        'importFileId': value.importFileId,
        'importFileIssueCount': value.importFileIssueCount,
        'totalCount': value.totalCount,
        'conflictCount': value.conflictCount,
        'resolvedCount': value.resolvedCount,
    };
}

