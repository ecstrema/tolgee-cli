/* tslint:disable */
/* eslint-disable */
/**
 * Tolgee API 
 * Tolgee Server API reference
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { KeysWithTranslationsPageModelEmbedded } from './KeysWithTranslationsPageModelEmbedded';
import {
    KeysWithTranslationsPageModelEmbeddedFromJSON,
    KeysWithTranslationsPageModelEmbeddedFromJSONTyped,
    KeysWithTranslationsPageModelEmbeddedToJSON,
} from './KeysWithTranslationsPageModelEmbedded';
import type { LanguageModel } from './LanguageModel';
import {
    LanguageModelFromJSON,
    LanguageModelFromJSONTyped,
    LanguageModelToJSON,
} from './LanguageModel';
import type { PageMetadata } from './PageMetadata';
import {
    PageMetadataFromJSON,
    PageMetadataFromJSONTyped,
    PageMetadataToJSON,
} from './PageMetadata';

/**
 * 
 * @export
 * @interface KeysWithTranslationsPageModel
 */
export interface KeysWithTranslationsPageModel {
    /**
     * 
     * @type {KeysWithTranslationsPageModelEmbedded}
     * @memberof KeysWithTranslationsPageModel
     */
    embedded?: KeysWithTranslationsPageModelEmbedded;
    /**
     * 
     * @type {PageMetadata}
     * @memberof KeysWithTranslationsPageModel
     */
    page?: PageMetadata;
    /**
     * Provided languages data
     * @type {Array<LanguageModel>}
     * @memberof KeysWithTranslationsPageModel
     */
    selectedLanguages: Array<LanguageModel>;
    /**
     * Cursor to get next data
     * @type {string}
     * @memberof KeysWithTranslationsPageModel
     */
    nextCursor?: string;
}

/**
 * Check if a given object implements the KeysWithTranslationsPageModel interface.
 */
export function instanceOfKeysWithTranslationsPageModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "selectedLanguages" in value;

    return isInstance;
}

export function KeysWithTranslationsPageModelFromJSON(json: any): KeysWithTranslationsPageModel {
    return KeysWithTranslationsPageModelFromJSONTyped(json, false);
}

export function KeysWithTranslationsPageModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): KeysWithTranslationsPageModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'embedded': !exists(json, '_embedded') ? undefined : KeysWithTranslationsPageModelEmbeddedFromJSON(json['_embedded']),
        'page': !exists(json, 'page') ? undefined : PageMetadataFromJSON(json['page']),
        'selectedLanguages': ((json['selectedLanguages'] as Array<any>).map(LanguageModelFromJSON)),
        'nextCursor': !exists(json, 'nextCursor') ? undefined : json['nextCursor'],
    };
}

export function KeysWithTranslationsPageModelToJSON(value?: KeysWithTranslationsPageModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        '_embedded': KeysWithTranslationsPageModelEmbeddedToJSON(value.embedded),
        'page': PageMetadataToJSON(value.page),
        'selectedLanguages': ((value.selectedLanguages as Array<any>).map(LanguageModelToJSON)),
        'nextCursor': value.nextCursor,
    };
}

