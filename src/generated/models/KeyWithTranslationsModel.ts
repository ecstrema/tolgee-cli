/* tslint:disable */
/* eslint-disable */
/**
 * Tolgee API 
 * Tolgee Server API reference
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ScreenshotModel } from './ScreenshotModel';
import {
    ScreenshotModelFromJSON,
    ScreenshotModelFromJSONTyped,
    ScreenshotModelToJSON,
} from './ScreenshotModel';
import type { TagModel } from './TagModel';
import {
    TagModelFromJSON,
    TagModelFromJSONTyped,
    TagModelToJSON,
} from './TagModel';
import type { TranslationViewModel } from './TranslationViewModel';
import {
    TranslationViewModelFromJSON,
    TranslationViewModelFromJSONTyped,
    TranslationViewModelToJSON,
} from './TranslationViewModel';

/**
 * 
 * @export
 * @interface KeyWithTranslationsModel
 */
export interface KeyWithTranslationsModel {
    /**
     * Id of key record
     * @type {number}
     * @memberof KeyWithTranslationsModel
     */
    keyId: number;
    /**
     * Name of key
     * @type {string}
     * @memberof KeyWithTranslationsModel
     */
    keyName: string;
    /**
     * Tags of key
     * @type {Array<TagModel>}
     * @memberof KeyWithTranslationsModel
     */
    keyTags: Array<TagModel>;
    /**
     * Count of screenshots provided for the key
     * @type {number}
     * @memberof KeyWithTranslationsModel
     */
    screenshotCount: number;
    /**
     * Key screenshots. Not provided when API key hasn't screenshots.view scope permission.
     * @type {Array<ScreenshotModel>}
     * @memberof KeyWithTranslationsModel
     */
    screenshots?: Array<ScreenshotModel>;
    /**
     * Translations object
     * @type {{ [key: string]: TranslationViewModel; }}
     * @memberof KeyWithTranslationsModel
     */
    translations: { [key: string]: TranslationViewModel; };
}

/**
 * Check if a given object implements the KeyWithTranslationsModel interface.
 */
export function instanceOfKeyWithTranslationsModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "keyId" in value;
    isInstance = isInstance && "keyName" in value;
    isInstance = isInstance && "keyTags" in value;
    isInstance = isInstance && "screenshotCount" in value;
    isInstance = isInstance && "translations" in value;

    return isInstance;
}

export function KeyWithTranslationsModelFromJSON(json: any): KeyWithTranslationsModel {
    return KeyWithTranslationsModelFromJSONTyped(json, false);
}

export function KeyWithTranslationsModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): KeyWithTranslationsModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'keyId': json['keyId'],
        'keyName': json['keyName'],
        'keyTags': ((json['keyTags'] as Array<any>).map(TagModelFromJSON)),
        'screenshotCount': json['screenshotCount'],
        'screenshots': !exists(json, 'screenshots') ? undefined : ((json['screenshots'] as Array<any>).map(ScreenshotModelFromJSON)),
        'translations': (mapValues(json['translations'], TranslationViewModelFromJSON)),
    };
}

export function KeyWithTranslationsModelToJSON(value?: KeyWithTranslationsModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'keyId': value.keyId,
        'keyName': value.keyName,
        'keyTags': ((value.keyTags as Array<any>).map(TagModelToJSON)),
        'screenshotCount': value.screenshotCount,
        'screenshots': value.screenshots === undefined ? undefined : ((value.screenshots as Array<any>).map(ScreenshotModelToJSON)),
        'translations': (mapValues(value.translations, TranslationViewModelToJSON)),
    };
}

